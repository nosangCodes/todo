datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdTasks   Task[] @relation("createdByUser")
  assignedTasks  Task[] @relation("assignedToUser")
  completedTasks Task[] @relation("completedByUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectsCreated    Project[]           @relation("creator")
  projectInvitations ProjectInvitation[] @relation("invitedUser")
  projectInvitedTo   ProjectInvitation[] @relation("invitedByUser")

  projectMembers ProjectMember[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  dueDate     DateTime
  priority    String
  completed   Boolean?  @default(false)
  completedOn DateTime?

  completedByUserId String? @db.ObjectId
  completedByUser   User?   @relation("completedByUser", fields: [completedByUserId], references: [id], onDelete: Cascade)

  userId    String @db.ObjectId
  createdBy User   @relation("createdByUser", fields: [userId], references: [id], onDelete: Cascade)

  assignedToEmail String?
  assignedToId    String? @db.ObjectId
  assignedTo      User?   @relation("assignedToUser", fields: [assignedToId], references: [id])

  projectId String?  @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  userId    String @db.ObjectId
  createdBy User   @relation("creator", fields: [userId], references: [id], onDelete: Cascade)

  tasks Task[]

  invitations ProjectInvitation[] @relation("invitedProject")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members ProjectMember[]
}

model ProjectMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectInvitation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  invitedEmail String

  invitedByUserId String  @db.ObjectId
  projectId       String  @db.ObjectId
  userId          String? @db.ObjectId

  invitedByUser  User    @relation("invitedByUser", fields: [invitedByUserId], references: [id], onDelete: Cascade)
  invitedUser    User?   @relation("invitedUser", fields: [userId], references: [id], onDelete: Cascade)
  invitedProject Project @relation("invitedProject", fields: [projectId], references: [id], onDelete: Cascade)

  projectInvitationResponse ProjectInvitationResponse?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectInvitationResponse {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  projectInvitationId String            @unique @db.ObjectId
  projectInvitation   ProjectInvitation @relation(fields: [projectInvitationId], references: [id])

  response InvitationResponse @default(NOT_RESPONDED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvitationResponse {
  ACCEPTED
  DECLINED
  NOT_RESPONDED
}
